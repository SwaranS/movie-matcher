{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.componenets.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","user","id","name","email","CardList","users","map","SearchBox","placeholder","handleChange","type","onChange","App","state","locals","searchField","fetch","then","response","json","setState","this","filteredUsers","filter","localUser","toLowerCase","includes","toLocaleLowerCase","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGaA,G,kBAAO,SAACC,GAAD,OAClB,sBAAKC,UAAW,iBAAhB,UACE,qBAAKC,IAAM,oBAAoBC,IAAG,+BAA2BH,EAAMI,KAAKC,GAAtC,4BAClC,6BAAKL,EAAMI,KAAKE,OAChB,4BAAIN,EAAMI,KAAKG,aCFNC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,MAAMC,KAAI,SAACN,GAAD,OACf,cAAC,EAAD,CAAoBA,KAAOA,GAAhBA,EAAKC,UCNXM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+BCG,E,kDAhCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,OAAQ,GACRC,YAAa,KAJH,E,gEAQO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACZ,GAAD,OAAW,EAAKe,SAAS,CAAEN,OAAQT,S,+BAEnC,IAAD,SACyBgB,KAAKR,MAA7BC,EADD,EACCA,OAAQC,EADT,EACSA,YACVO,EAAgBR,EAAOS,QAAO,SAACC,GAAD,OAClCA,EAAUtB,KAAKuB,cAAcC,SAASX,EAAYY,wBAGpD,OACE,sBAAK9B,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CACAW,YAAc,eACdC,aAAgB,SAAAmB,GAAC,OAAI,EAAKR,SAAS,CAACL,YAAca,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUzB,MAAOiB,W,GA3BPS,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.045c5d0b.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css';\n\nexport const Card = (props) => (\n  <div className ='card-container'>\n    <img alt = \"Funy Looking User\" src ={`https://robohash.org/${props.user.id}?set=set2&size=180x180`}/>\n    <h2>{props.user.name}</h2>\n    <p>{props.user.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.styles.css\";\n\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.users.map((user) => (\n        <Card key={user.id} user= {user}/>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({placeholder,handleChange}) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { CardList } from \"./components/card-list/card-list.componenets\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      locals: [],\n      searchField: \" \",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ locals: users }));\n  }\n  render() {\n    const { locals, searchField } = this.state;\n    const filteredUsers = locals.filter((localUser) =>\n      localUser.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Search Users</h1>\n        <SearchBox\n        placeholder = 'Search Users' \n        handleChange = {e => this.setState({searchField : e.target.value})}/>\n        \n        <CardList users={filteredUsers}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}